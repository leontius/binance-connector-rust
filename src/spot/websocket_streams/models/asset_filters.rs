/*
 * Binance Spot WebSocket Streams
 *
 * OpenAPI Specifications for the Binance Spot WebSocket Streams
 *
 * API documents:
 * - [Github web-socket-streams documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md)
 * - [General API information for web-socket-streams on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#![allow(unused_imports)]
use crate::spot::websocket_streams::models;
use serde::{Deserialize, Deserializer, Serialize, de::Error};
use serde_json::Value;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(try_from = "Value")]
pub enum AssetFilters {
    #[serde(rename = "MAX_ASSET")]
    MaxAsset(Box<models::MaxAssetFilter>),
    Other(serde_json::Value),
}

impl Default for AssetFilters {
    fn default() -> Self {
        Self::MaxAsset(Default::default())
    }
}

impl TryFrom<Value> for AssetFilters {
    type Error = serde_json::Error;

    fn try_from(v: Value) -> Result<Self, Self::Error> {
        let tag = v
            .get("filterType")
            .and_then(Value::as_str)
            .ok_or_else(|| serde_json::Error::custom("missing field `filterType`"))?;

        match tag {
            "MAX_ASSET" => {
                let payload = serde_json::from_value(v)?;
                Ok(AssetFilters::MaxAsset(Box::new(payload)))
            }

            _ => Ok(AssetFilters::Other(v)),
        }
    }
}
