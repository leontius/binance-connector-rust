/*
 * Binance Spot REST API
 *
 * OpenAPI Specifications for the Binance Spot REST API
 *
 * API documents:
 * - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)
 * - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#![allow(unused_imports)]
use crate::spot::rest_api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MyFiltersResponse {
    #[serde(rename = "exchangeFilters", skip_serializing_if = "Option::is_none")]
    pub exchange_filters: Option<Vec<models::ExchangeFilters>>,
    #[serde(rename = "symbolFilters", skip_serializing_if = "Option::is_none")]
    pub symbol_filters: Option<Vec<models::SymbolFilters>>,
    #[serde(rename = "assetFilters", skip_serializing_if = "Option::is_none")]
    pub asset_filters: Option<Vec<models::AssetFilters>>,
    #[serde(rename = "rateLimits", skip_serializing_if = "Option::is_none")]
    pub rate_limits: Option<Vec<models::RateLimits>>,
}

impl MyFiltersResponse {
    #[must_use]
    pub fn new() -> MyFiltersResponse {
        MyFiltersResponse {
            exchange_filters: None,
            symbol_filters: None,
            asset_filters: None,
            rate_limits: None,
        }
    }
}
